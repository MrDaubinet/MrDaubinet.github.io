{"pages":[],"posts":[{"title":"The One True Version Control","text":"In the land of web applications, collaboration and code management. There exists a version control software, that is so effective in its purpose, it surpasses all its competitors. Needless to say, I‚Äôm talking about Git, an essential tool for any type of software development that needs to facilitate remote development. This post is going to be targeted at any developer who hasn‚Äôt used git before (I‚Äôm looking at those dropbox devs in the corner üòû) or any, who don‚Äôt feel completely comfortable with it. I think remote development has reached a pinnacle and it‚Äôs possible that it may never come down. The Covid-19 pandemic has shown the world that many technological businesses can run almost entirely remote. As a developer, this means that an understanding of version control software becomes a must have skill. So, this post is going to be a little ‚åõ but its also going get through all the ‚úîÔ∏è that you need to know to become a master of version control and remote development. Feel free to use the catalogue on the side if you want to skip through to a section. Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later. Scott Chacon and Ben StraubPro Git book Git gives you the ability to keep track of changes made to your code through commits. Commits provide a full history of adaptions made by any user, which can be reviewed and restored from any point in the development life time. Git also provides collaboration management through merges, pushes and pulls. These tools allow you to sync the changes you make to the code with the changes others have made and vice versa. The BasicsGit has a methodology of a repositories, branches and commits. A repository is used as a location to store branches, each branch is a line in the illustration below. A branch is made up of a linked-list of commits, each commit is a circle in the illustration below. Each commit is an instruction of changes made to the code since the previous commit. If you follow the commits up the branch, you can see all the changes made to the code from the beginning of its existence to the most up to date version. The repository is created with a single branch, the master branch, which has a single commit. An Example‚Ä¶lets say I create a new repository, this can be seen on the illustration above with the circle and branch linked to ‚ÄúMe‚Äù. As development on the project continues, I might ask for your help and ‚ÄúYou‚Äù may create a new branch. In this example, you decide that the code you implemented was terrible and you never want to see it again, so your branch never gets merged back to the master branch. However, ‚ÄúYour Friend‚Äù says she can help me with the problem. She‚Äôs really good at coding and solves the problem in two commits, then merges her changes back into the master branch. Collaboration with git relies on the master branch and a remote repository. Each developer has a local copy of this repository and they can create additional branches and new commits on their new branches. As a developer continues to work locally, their branches will diverge from the those stored on the remote repository. When a developer wants to resynchronize with the remote repository, they must first merge all branches they were working on locally, to there local master branch and then merge there local master branch with the one stored on the remote repository. This is usually done by pulling the commits from the remote master branch, merging them with commits on your local master branch and then pushing a new commit to the remote master branch. I‚Äôm going to take a you through a real world example of using git, with github as the platform of our remote repository. Starting OutTo begin working with git, you‚Äôre going to need to install it on the operating system (OS) of your choice. Instructions can be found on the official Git website here. Once installed, create a new repository on github. I‚Äôm going to create a repository called ‚ÄúVersion-Control-with-Git‚Äù, made for this blog post. Right off the bat, we have two different options for linking a local repository with our newly created remote repository. Lets take a close look at each method. 1. Initialize a new local repository:For this method, you need to create a local repository on your machine, add a new commit to it, then push your changes to the remote master branch. Lets break down step by step: Create a folder for the project and call it whatever you want. I went with ‚ÄúVersion-Control-with-Git‚Äù, to keep it inline with the name of the repository. Create a ‚ÄúREADME.md‚Äù as the first file added to our repository. Our README file will use a format called Markdown, which is associated with the file extension ‚Äú.md‚Äù. Markdown files are written in a simple html-like structure, specifically created for easy documentation. To get a more in-depth understanding of markdown, check the Github Guides. To make this step easy, We start by creating a new .txt file called README.txt. We write in ‚ÄúThis is my new Repository‚Äù. Then we rename the file as ‚ÄúREADME.md‚Äù, to save it with the .md extension. Open your windows command console and navigate to the folder you created: cd C:\\Blogs\\repositories\\Version-Control-with-Git then type the following git init git add README.md git commit -m \"first commit\" git remote add origin https://github.com/MrDaubinet/Version-Control-with-Git.git git push -u origin master We‚Äôre going to visit each of these git commands in detail a little later in this post. But to briefly explain whats happening here, we first initialize an empty repository and add the readme file we created earlier. (You have to specify the files you want to add before you can commit them). We commit the change of adding the readme file, then we link a new remote repository, calling it origin with the url to the repository we created on github. Lastly, we push the commit we made, to the master branch of the remote (origin) repository. Got it? Good! üí£ Just remember to change MrDaubinet and Version-Control-with-Git to your github username and the repository you created for the project. If you did all the steps correctly, you will see that your online repository has been updated and it now includes the readme file. 2. Clone the repository :Instead of initializing a local repository, we can clone the repository directly from git. Make sure you tick ‚Äúinitialize this repository with a README‚Äù when creating the repository, in order to create a repository that can be cloned, it needs to have some content in it to copy. Click the green clone button and copy the url Navigate to the location where you want to local repository to be stored, open your windows command console and type the following: git clone https://github.com/MrDaubinet/Version-Control-with-Git.git Remember to change MrDaubinet and Version-Control-with-Git to your github username and the repository you created for the project. If you did everything correctly, you will see that your local repository has been created and it now includes the readme file that are on the repository. And thats the basics done. Congratulations! You now know how to create a repository on github and link to it for local development. Lets take a closer look at some of the commands that you will use to synchronize the code between the local and remote repositories. Tracking ChangesLets investigate how we add new files to the repository and how we can check which files have been added and which have not. Create a new file called HelloWorld.txt. Open the text file, add ‚Äúhello world‚Äù to the first line and save the file. Open your windows command console and type the following: git status git will respond with the output: On branch master Your branch is up to date with 'origin/master'. Untracked files: &nbsp;&nbsp;(use \"git add ...\" to include in what will be committed) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HelloWorld.txt nothing added to commit but untracked files present (use \"git add\" to track) Git show the ‚ÄúHelloWorld‚Äù file we just created is untracked. This means that the file has been added to a folder, which is being tracked by git, but it has not been tracked for a git commit. Going through this line by line: line 1 tells us that we are on the master branch.Line 2 tells us that we have the most recent changes that are on the remote master branch.Line 3 tells us that there are untracked files.Line 4 tells us how to add these files to be tracked for the commit.Line 5 tells us what the untracked file is and line 6 is pretty self explanatory. To track this file for a commit, we type the following: git add HelloWorld.txt If we now check the status with: git status git will respond with the output: On branch master Your branch is up to date with 'origin/master'. Changes to be committed: &nbsp;&nbsp;(use \"git reset HEAD ...\" to unstage) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new file: HelloWorld.txt We see that the ‚ÄúHelloWorld‚Äù file is now tracked and ready to be included in the next commit. Lets say you wanted to undo the file you just added, maybe you want to commit other files that have been added, but not this one. You can type in: git reset HEAD HelloWorld.txt If we now check the status with: git status git will respond with the output: On branch master Your branch is up to date with 'origin/master'. Untracked files: &nbsp;&nbsp;(use \"git add ...\" to include in what will be committed) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HelloWorld.txt nothing added to commit but untracked files present (use \"git add\" to track) If you want to add multiple files at once, you can specify each file with the command: git add file-name-1 file-name-2 file-name-3 Or you can add everything that is untracked in the current folder with the command: git add . Awesome! You now know how to track files for a commit with the git add command and you can check which files are tracked and untracked with the git status command. Committing ChangesLets now take a look at how we commit code changes and view our logs of commits. To begin with, lets take a look at what currently resides in the git logs. Type in the following command: git log git will respond with the output: commit e9e9de444b8170087901a44e75335648f701c13b (origin/master, origin/HEAD) Author: MrDaubinet Date: Sun Jun 21 14:28:06 2020 +0200 &nbsp;&nbsp; first commit The git output tells us that theres is a single commit which has been made on this branch. It was made by me (my username and email) on Sunday the 21st of June at 2:28 pm. It also tells us that the commit message is ‚Äúfirst commit‚Äù. The tricky part of this output, (origin/master, origin/HEAD), tells us a few things about the currently set remote repository for this commit. Firstly, origin/master indicates that the changes in this commit have been pushed to the master branch of the remote repository named ‚Äúorigin‚Äù. Secondly, origin/HEAD indicates that the default branch of origin, which is its master branch, is pointing to this commit. Meaning this is the (last) most up to date commit that has been pushed to the master branch on the remote repository. This commit was made for us, when we initialized and linked the local and remote repositories. To Exit git log, you need to hit the \"q\" character on your keyboard. This is control method taken from the vim text editor. Before we try commit the files we‚Äôve added, lets make sure that we have tracked the HelloWorld.txt file we created earlier.Type in the command: git add HelloWorld.txt I‚Äôll leave it up to you to check that the file has been tracked. Now we can can commit the file. Each commit requires a commit message, which can be added inline or interactively. Lets see how this is done. lets create a commit with an inline message by using the following command: git commit -m \"Adding Hello world text file\" git will respond with the output: [master 20be7fb] Adding Hello world text file 1 file changed, 1 insertion(+) create mode 100644 HelloWorld.txt The git output tells us that 1 file was changed (HelloWorld.txt) and 1 file was inserted (also HelloWorld.txt). It shows us the commit message used ‚ÄúAdding Hello world text file‚Äù along with the first 4 characters of the hash which it uses to identify and secure the commit. Lets update the file then add a new commit interactively. Open the text file, add the new line ‚Äúgoodbye world‚Äù and save. To see the change that that occurred in our HelloWorld.txt file, type in the following command: git diff git will respond with the output: diff --git a/HelloWorld.txt b/HelloWorld.txt index 95d09f2..cc8face 100644 --- a/HelloWorld.txt +++ b/HelloWorld.txt @@ -1 +1,2 @@ -hello world \\ No newline at end of file +hello world +goodbye world Lets Break this down, line by line:Line 1 tells us that git has two versions of HelloWorld.txt, for current and commited changes.Line 2 tells us the indexes of each file.Line 3 and 4 tell us that a/HelloWorld.txt is being removed and +++ b/HelloWorld.txt is being inserted.Line 5 indicates a unified diff hunk identifier. this is documented by GNU Diffutils here.Line 6 to 9 show what was removed and inserted into the file. To see what the file looked like before its current changed (what it looked like on the last commit) type the following: git show 95d09f2 git will respond with the output: hello world Perfect, thats exactly how it looked before we added the new line. Lets add this change and make a new commit interactively with the following command: git commit -a Your console should jump you into an interactive nano editor, where you can enter in your commit message, then hit ctrl+x on your keyboard to exit and save the commit: interactive commit12345678910Added goodbye world# Please enter the commit message for your changes. Lines starting# with '#' will be ignored, and an empty message aborts the commit.## On branch master# Your branch is ahead of 'origin/master' by 1 commit.# (use \"git push\" to publish your local commits)## Changes to be committed:# modified: HelloWorld.tx Now, if we use the git log command, we can see all 3 commits. commit 43e4a93f98554068586d7df91db7b1a226446197 Author: MrDaubinet Date: Mon Jun 22 13:59:22 2020 +0200 &nbsp;&nbsp;&nbsp;&nbsp;Added goodbye world commit 20be7fb5279332c2a6a3ddcd582621059fc92832 Author: MrDaubinet Date: Mon Jun 22 12:40:49 2020 +0200 &nbsp;&nbsp;&nbsp;&nbsp;Adding Hello world text file commit e9e9de444b8170087901a44e75335648f701c13b (origin/master, origin/HEAD) Author: MrDaubinet Date: Sun Jun 21 14:28:06 2020 +0200 &nbsp;&nbsp;&nbsp;&nbsp;first commit Well Done! You've gained the ability to create commits and view your commit logs. You can now fully version control your code when working locally. Merging BranchesLets see how git manages collaboration between branches. We‚Äôre going to create a new branch, add a new file then merge these changes back into the master branch. We‚Äôre also going to take a look at what a merge conflict looks like, how it happens and how to deal with one. To start this off, we‚Äôre going to create and checkout a new branch with the following commands: git branch add-another-file git checkout add-another-file Developers usually create new branches when they want to work on a new feature and merge the branch back into master when the feature is complete. Thus, it makes sense to name your branch something to do with the feature. In our case, we‚Äôre going to be adding a new file to the repository. Checking-out the new branch means we switch from developing on master, to developing on add-another-file. Type in the following command to list all your current branches: git branch add-another-file Git will output the following: * add-another-file master We can see we have twp branches and the current active branch is represented with a ‚Äú*‚Äù. Now lets add a new File, create a new file called PieceOfCake.txt. If you check git status, git would tell you that you have a new untracked file. Lets track and commit the file with the following commands: git add . git commit -m \"Added PieceOfCake.txt to the repository\" Now that we‚Äôve added the PieceOfCake.txt file on our ‚Äúadd-another-file‚Äù branch, lets go back to our master branch and merge in the changes from the ‚Äúadd-another-file‚Äù branch Checkout master with the following command: git checkout master You may notice that git told us that we are ahead of the origin/master. Don't worry, we're going to get to this in the next section. Merge the ‚Äúadd-another-file‚Äù branch into master with the following command: git merge \"add-another-file\" Git will output the following: Updating 43e4a93..7f70216 Fast-forward PieceOfCake.txt | 0 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 PieceOfCake.txt So, git tells us that it updated from commit 43e4a93 to commit 7f70216. Remember these are the unique hash values git assigns to each commit. Git also told us that this was a ‚ÄúFast-forward‚Äù merge, meaning it had not merge conflicts and could simply append the commit from ‚Äúadd-another-file‚Äù branch, into the master branch. In this merge, 1 file was changed, 0 files were inserted and 0 files were deleted. If you type in the command git log, you can see the chain of commits on master now includes the commit we made on ‚Äúadd-another-file‚Äù. Lets now look at a scenario with a merge conflict. To create a merge conflict, we‚Äôre going to need to change the same file on two different branched and merge them together. Lets start by creating and checking out a new branch with the following commands: git branch merge-conflict git checkout merge-conflict Git checkout creates a new branch based off of your current master branch, so the branch merge-conflict will have all the files that were in the master branch when it was created. lets update the PieceOfCake.txt file by adding a line of text and saving the file. Then track and commit the change with the following commands: git add . git commit -m \"Updated the text on PieceOfCake.txt\" Now lets go back to our master branch with the command: git add checkout master Now we update the PieceOfCake.txt file by adding a different line of text and saving the file. Then track and commit the change with the following commands: git add . git commit -m \"Updated PieceOfCake.txt with different text\" Lets try merge the branch ‚Äúmerge-conflict‚Äù into our master branch. git checkout master git merge \"merge-conflict\" Oh no! we got a merge conflict‚Ä¶ just as expected. Auto-merging PieceOfCake.txt CONFLICT (content): Merge conflict in PieceOfCake.txt Automatic merge failed; fix conflicts and then commit the result. If you open up the file, you‚Äôll see that git has made some changes to it. Git has split the code, where the merge conflict occurred. ‚Äú&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD‚Äù to ‚Äú=======‚Äù, indicates the section of the code which is currently on your working branch HEAD. By default, ‚ÄúHEAD‚Äù is a pointer to the latest commit in the currently active branch. So head is the latest commit on our master branch. ‚Äú=======‚Äù to ‚Äú&gt;&gt;&gt;&gt;&gt;&gt;&gt; merge-conflict‚Äù, indicates the section of code which is currently on the branch you are trying to merge with. Git leaves it up to the developer to manually fix the file and select which parts of each branch they want in it. I updated my file to look like this: Now we can track this change and add it as a new commit: git add . git commit -m \"Fixed the merge conflict\" Great Job! And thats all there is too it, you now know how to create and fixed a merge conflicts. Pulling and Pushing ChangesEvery section which we‚Äôve covered up until now has been to introduce the concepts needed to collaborate remotely with git. This last quick section will show you how to push your changes onto the remote repository and pull changes from the remote repository. First lets look at how you push your changes to the remote repository with the following command: git push Your remote repository should now be updated with the most recent version of your local repository. Next, we‚Äôre going to see how you would pull changes from the remote repository. For this example, I‚Äôm going to get my friend jason to clone the repository, make a new commit with some changes on his local master branch and then push the changes to the remote repository. After he‚Äôs done his changes, we use the following commands to pull them into our local master branch; git pull Git will output the following: Unpacking objects: 100% (3/3), done. From https://github.com/MrDaubinet/Version-Control-with-Git 604088b..591ad08 master -> origin/master Updating 604088b..591ad08 Fast-forward hello.txt | 1 + 1 file changed, 1 insertion(+) create mode 100644 hello.txt In summary, our master was updated to the origin/master branch. Git pull runs an automatic merge command and we had a ‚ÄúFast-forward‚Äù merge with no conflicts. Lastly, we can see that 1 file was changed and added, the hello.txt file. You can run git fetch to fetch the most recent changes on the remote master branch without actually merging them. You would then need to run git merge if you want to integrate the changes into your master branch.","link":"/The-One-True-Version-Control/"},{"title":"This is my world, and its all for me","text":"I created this blog so that I can track the things I do and the things I learn. I‚Äôm a post graduate computer scientist, currently completing my masters in AI. I might throw in a little hobby related things here and there, but most of my posts are going to be about Artificial Intelligence (AI) and Software Engineering (SE). AI is a subject that I‚Äôve learned through academic study, SE relates to the skill set of my current day job and a personal interest in full stack web development. The blog posts I publish are going to be written with the intention that the reader has no previous exposure to the subject I‚Äôm writing about. I‚Äôm a windows man, yes I know, blasphemy for any developer with a sense of pride. To be honest, I like developing on windows and I‚Äôll continue doing so until the day I buy a mac. If you‚Äôre a linux or mac developer, getting things running on your machine is usually easier and there are allot more resources out there for you to take advantage of. So go read some other blog. The first website I made was for my dad and his start up Automated Utility Systems. I was a student at the time and I used what I knew: HTML, Jquery and Javascript (JS). It was a Internet Of Things (IOT) application that provided smart metering systems without the need for any manual intervention. I taught my dad what I understood and not before long he was going at it himself, shooting in charts, analytics and tables wherever he saw fit. As a student looking for a little extra money, I was pretty happy with what I had done. Looking back at the site with my current experience in modern JS frameworks, I can‚Äôt help but judge my implementation, something I wish to remedy in the near future. In the beginning of my third year at university, I had no idea what AI (Artificial Intelligence) was. Like anyone else who hasn‚Äôt had exposure to it, I thought it was about robots doing human things. I saw the rise of automated vaccum cleaners and all the ‚ÄúMachine Learning‚Äù catch phrases that game along with the latest smart phones and all of this wasn‚Äôt really anything of interest to me. Nevertheless, a few of my friends ended up taking a module in it and i hoped on for the ride. 1 month later, all my friends have dropped and I‚Äôm attending every lecture. My journey into AI started with PSO‚Äôs (Particle Swarm Optimization Algorithm) and GA‚Äôs (Genetic Algorithms). These are stochastic optimization algorithms used to find solutions to multi-dimensional optimization problems. Stochastic Optimization algorithms are an alternative to using exhaustive iterative searches. They do not guarantee finding the best possible solution, but they can guarantee finding an optimal solution in an optimal or controlled time period. More on these topics can be found in these future posts: , . After completing my undergraduate, I continued studying towards my honours degree majoring in AI, while working at Shandon Business Solutions, a business unit of EOH, focused on software development. Here, allot of what i did was research based. I spearheaded an optimization solution to a tutor resource allocation problem, which had a few hard constraints. And I helped implemented prediction algorithms for a platinum mining process. Succeeding my honours degree, I moved to a company called Merlynn Intelligence Technologies. At Merlynn, I‚Äôve spent most of my time developing full stack applications in Node.js and various front end frameworks including Ember.js and Svelte.js. I‚Äôve had hands-on development and operations (DevOps) experience with git, docker and google cloud console (GCP). I‚Äôve implemented various internal and external projects, most notably, I leaded development for the TOM for My Choices Foundation web application. A non-profit project, aimed towards helping woman in india facing abusive relationships by digitizing real counsellors decisions with Merlynn‚Äôs proprietary human expertise technology. 2 years ago, my family started immigrating to Australia. Over that period, I started my first job and pushed myself into learning many different aspects about AI. So, part of the reason that I‚Äôve decided to write out these blog posts is so that I can write about and share the things that I‚Äôve learnt and done, but another reason is so that I can show my family what I‚Äôve been doing and have some media through which to talk about. I also want to convince myself that I know about the things I‚Äôve learnt I want to be able to prove this to others. My name is Jordan Dane Daubinet and this is my blog.","link":"/This-is-Me/"}],"tags":[{"name":"Version Control","slug":"Version-Control","link":"/tags/Version-Control/"},{"name":"Informative","slug":"Informative","link":"/tags/Informative/"}],"categories":[{"name":"Software Engineering","slug":"Software-Engineering","link":"/categories/Software-Engineering/"},{"name":"Personal","slug":"Personal","link":"/categories/Personal/"}]}